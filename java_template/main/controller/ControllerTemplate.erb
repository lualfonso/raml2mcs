/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package <%= package %>.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import <%= package %>.model.*;
import <%= package %>.service.<%= @name %>Service;

/**
 *
 * @author CILALFONSO
 */
@RestController
@RequestMapping("<%= @version %>")
public class <%= @name %>Controller {
    @Autowired
    private <%=  @name%>Service <%= @name.downcase %>Service;
    <% @controller.each do |domain, props| %>
    <% props.each do |method, values| %><% if method == "get" %> 
    @GetMapping("<%= domain %>")
    public ResponseEntity get<%= props["props"][:entity].camelize %>(<% if !values[:request][:path].nil?  %><% values[:request][:path].each_with_index do |(path), index| %>@PathVariable Long <%= path %> <% if index != values[:request][:path].size - 1 %>,<% end %><% end %><% end %>)  {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>");
        <% if !domain.end_with?("{#{values[:request][:path].last}}") %>
        <%= values[:response][:object] %>Model wrapper = <%= @name.downcase %>Service.get<%= props["props"][:entity].pluralize.camelize %>(<% values[:request][:path].each_with_index do |(path), index| %><%= path %><% if index != values[:request][:path].size - 1 %>,<% end %><% end %>);        <% else %>
        <%= values[:response][:object] %>Model wrapper = <%= @name.downcase %>Service.get<%= props["props"][:entity].camelize %>(<% values[:request][:path].each_with_index do |(path), index| %><%= path %><% if index != values[:request][:path].size - 1 %>,<% end %><% end %>);        <% end %>
        return ResponseEntity.<%= values[:response][:code] %>().headers(headers).body(wrapper);
    }    <% end %>    <% if method == "post" %>

    @PostMapping("<%= domain %>")
    public ResponseEntity post<%= props["props"][:entity].camelize %>(<% if !values[:request][:body].nil?  %> @RequestBody <%= values[:request][:body] %>Model body, <% end %> HttpServletRequest request) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>"); 
        return ResponseEntity.created(new URI(request != null ? request.getRequestURI()  : "") ).headers(headers).body(<%= @name.downcase %>Service.post<%= props["props"][:entity].camelize %>(body));
    }    <% end %>    <% if method == "put" %>

    @PutMapping("<%= domain %>")
    public ResponseEntity put<%= props["props"][:entity].camelize %>(<% if !values[:request][:path].nil?  %><% values[:request][:path].each do |path| %>@PathVariable Long <%=path.underscore %>, <% end %><% end %> <% if !values[:request][:body].nil?  %> @RequestBody <%= values[:request][:body] %>Model body <% end %>) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>");<% if !values[:request][:path].nil? %> 
        if (<% values[:request][:path].each_with_index do |(path), index| %><%=path.underscore%> != null<% if index != values[:request][:path].size - 1 %> && <% end %><% end %>){
            <% values[:request][:path].each do |path| %>
        body.getData().set<%= path.underscore.camelize.gsub(props["props"][:entity].camelize,"") %>(<%= path.underscore %>);        <% end %>
        }<% end %>
        return ResponseEntity.<%= values[:response][:code] %>().headers(headers).body(<%= @name.downcase %>Service.put<%= props["props"][:entity].camelize %>(body));
    }    <% end -%>    <% if method == "delete" %>

    @DeleteMapping("<%= domain %>")
    public ResponseEntity delete<%= props["props"][:entity].camelize %>(<%if !values[:request][:path].nil?%><% values[:request][:path].each_with_index do |(path), index| %>@PathVariable Long <%= path %> <% if index != values[:request][:path].size - 1 %>,<% end %><% end %><% end %>) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>");
        <%= @name.downcase %>Service.delete<%= props["props"][:entity].camelize %>(<%if !values[:request][:path].nil?%><% values[:request][:path].each_with_index do |(path), index| %><%= path %><% if index != values[:request][:path].size - 1 %>, <% end %><% end %><% end %>);
        return ResponseEntity.<%= values[:response][:code] %>().headers(headers).build();
        
    }    
    <% end %>    <% end %> <% end %> 
}
