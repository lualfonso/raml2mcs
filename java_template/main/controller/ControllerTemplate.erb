/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package <%= package %>.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import <%= package %>.model.*;
import <%= package %>.service.<%= @controller[:serviceName] %>Service;


/**
 *
 * @author CILALFONSO
 */
@RestController
@RequestMapping("<%= @version %>")
public class <%= @name %> {
    @Autowired
    private <%= @controller[:serviceName] %>Service <%= @controller[:serviceName].downcase %>Service;
    <% @controller.select{|key,value| value.is_a?Hash }.each do |domain, props| %>
    <% props.each do |method, values| %><% if method == "get" %> 
    @GetMapping("<%= domain %>")
    public ResponseEntity getEntity(<% if !values[:request][:path].nil?  %>@PathVariable Long <%= values[:request][:path] %> <% end %>)  {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>");
        <% if values[:request][:path].nil? %>
        <%= values[:response][:object] %>Model wrapper = <%= @controller[:serviceName].downcase %>Service.getEntities();        <% else %>
        <%= values[:response][:object] %>Model wrapper = <%= @controller[:serviceName].downcase %>Service.getEntity(<%= values[:request][:path] %>);        <% end %>
        return ResponseEntity.<%= values[:response][:code] %>().headers(headers).body(wrapper);
    }    <% end %>    <% if method == "post" %>

    @PostMapping("<%= domain %>")
    public ResponseEntity postEntity(<% if !values[:request][:body].nil?  %> @RequestBody <%= values[:request][:body] %>Model body, <% end %> HttpServletRequest request) throws URISyntaxException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>"); 
        return ResponseEntity.created(new URI(request != null ? request.getRequestURI()  : "") ).headers(headers).body(<%= @controller[:serviceName].downcase %>Service.postEntity(body));
    }    <% end %>    <% if method == "put" %>

    @PutMapping("<%= domain %>")
    public ResponseEntity putEntity(<% if !values[:request][:path].nil?  %>@PathVariable Long <%= values[:request][:path] %>, <% end %> <% if !values[:request][:body].nil?  %> @RequestBody <%= values[:request][:body] %>Model body <% end %>) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>");
        <% if !values[:request][:path].nil? %>if (<%=values[:request][:path]%> != null){
        body.getData().set<%= values[:request][:path].camelize %>(<%= values[:request][:path] %>);
        }<% end %>
        return ResponseEntity.<%= values[:response][:code] %>().headers(headers).body(<%= @controller[:serviceName].downcase %>Service.putEntity(body));
    }    <% end -%>    <% if method == "delete" %>

    @DeleteMapping("<%= domain %>")
    public ResponseEntity deleteEntity(<% if !values[:request][:path].nil?  %>@PathVariable Long <%= values[:request][:path] %> <% end %>) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Responded", "<%= @name %>");
        <%= @controller[:serviceName].downcase %>Service.deleteEntity(<%= values[:request][:path] %>);
        return ResponseEntity.<%= values[:response][:code] %>().headers(headers).build();
        
    }    
    <% end %>    <% end %> <% end %> 
}
